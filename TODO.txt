This file tracks the various items to do in the pinball project in rough priority

** Raspberry Pi Specific Work
Get I2C bus output (IO chips and LED chips) included in I/O and diagnostics functionality
Create a cmake to build the program in Pi, and put EXE in right place to make paths work vs VS Code builds

** Generic arch improvements
Add glscissor support to turn on / off rendering to the score screen, that way sprites and clip at score screen edges
Add menu item to enable output montitor mode - and then transparent overlay play screen with output status
    - Make input / output test screen rendering more generic so it can be used in both places?
    - Put menu items to control transparency and turn normal screen on / off
Make output system automatic - main loop can set on / off durations, LED patterns, etc.. and out loop will manage
Make input / output processing fully threaded.
Create sound output queue system (both Windows and Rasp Pi?  Rasp Pi 1st priority)
Add some more interesting animation options (Any movement that makes animations better?)
Expand sprites to have animated sprites - eg: UV maps within a sprite with different images - base is there but need example to integrate.
    -  Is there some standard sprite format / program that can be used?
    -  Or add basic capability to animate more automatically between different sprites / loop / etc..
Add video playback capability

** Gameplay tasks
Create simple score / gameplay screen
Generate characters, dungeon screens
Super complicated state machine for normal gameplay (eg: the game)

** Hardware enabling
Design prototype HW, use test mode to enable
    * Flippers, Sligshots, Pop Bumpers, Lane / Ball Detectors, Multiball lock gate
    * Build proto cabinet w/ foam board
    * Decide to migrate to larger HDMI screen or not?
Build relay output boards that connect to output IO chips.  Likely FET controlled, opto-isolated and support multiple voltage output ranges

** Documentation
Write up arch docs
Write API / Programmers "How to Use" Docs for system

** Lower Priority
Duplicate all the Windows simulation capability in PiOS
Fix sprite animation acceleration parameter
Debug why u1 and u2 and x1 and x2 seem to be swapped when going from screen to 3D space.  Maybe rendering backface polys
Update all render screens to be independent from screen size, use more #defines to adjust screens more quickly when needed
Install git LFS as that large bitmaps, etc.. are expected at some point

** Maybe future stuff
Look a neo-pixel support - can we have multi-color strips on individual addressed LEDs?
Add a 3D model sprite - allow for 3D objects on the screens, basic animations, etc.. Tons of work here depending on how complicated
